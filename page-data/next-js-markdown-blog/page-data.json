{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/next-js-markdown-blog","result":{"data":{"post":{"__typename":"MdxPost","slug":"/next-js-markdown-blog","title":"Next.js Markdown blog","date":"13.11.2018","tags":null,"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Next.js Markdown blog\",\n  \"date\": \"2018-11-13T00:00:00.000Z\",\n  \"slug\": \"/next-js-markdown-blog\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Next.js is a great \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/\"\n  }), \"React\"), \" framework. It's easy to use and lightweight. I use it on my personal \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://toukopeltomaa.com/\"\n  }), \"website  (toukopeltomaa.com)\"), \".\"), mdx(\"p\", null, \"In this post I'm going to show how to make a simple blog using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Markdown\"\n  }), \"Markdown\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://nextjs.org/\"\n  }), \"Next.js\"), \".\"), mdx(\"h3\", null, \"1. Create folder for all Markdown files\"), mdx(\"p\", null, \"Create a folder named posts root of your project. Create all of your posts as Markdown there\"), mdx(\"h4\", null, \"Example Markdown file in posts/example-post.md\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"---\\ntitle: Example post\\ndate: 13-11-2018\\nwrittenBy: Touko Peltomaa\\n---\\n## Example post\\n\")), mdx(\"h3\", null, \"2. Add Webpack plugin raw-loader to next.config.js\"), mdx(\"p\", null, \"We need \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/webpack-contrib/raw-loader\"\n  }), \"raw-loader\"), \" to load Markdown files\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i -D raw-loader\\n\")), mdx(\"h4\", null, \"next.config.js file\"), mdx(\"p\", null, \"Create next.config.js to your project's root folder if you haven't already\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n    webpack: (config) => {\\n        config.module.rules.push({\\n            test: /\\\\.md$/,\\n            use: 'raw-loader'\\n        });\\n\\n        return config\\n    }\\n}  \\n\")), mdx(\"h3\", null, \"3. Create home page at pages/index.js\"), mdx(\"h4\", null, \"Parse posts\"), mdx(\"p\", null, \"We are going to parse posts with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/jonschlinkert/gray-matter\"\n  }), \"gray-matter\"), \" library\"), mdx(\"p\", null, \"gray-matter library will parse the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/YAML\"\n  }), \"YAML\"), \" metadata. We can use the YAML data for SEO, written by and post dates.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i -S gray-matter\\n\")), mdx(\"h4\", null, \"Gets posts from posts/* folder\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from 'react'\\nimport matter from 'gray-matter';\\nimport Link from 'next/link';\\n\\nexport default class extends React.Component {\\n    static async getInitialProps() {\\n        // Get posts from folder\\n        const posts = (ctx => {\\n            const keys = ctx.keys();\\n            const values = keys.map(ctx);\\n\\n            const data = keys.map((key, index) => {\\n                // Create slug from filename\\n                const slug = key.replace(/^.*[\\\\\\\\\\\\/]/, '').split('.').slice(0, -1).join('.');\\n                const value = values[index];\\n\\n                // Parse document\\n                const document = matter(value);\\n\\n                return {\\n                    document,\\n                    slug\\n                };\\n            });\\n\\n            return data;\\n        })(require.context('../posts', true, /\\\\.md$/));\\n\\n        return {\\n            posts\\n        };\\n    }\\n\\n    render() {\\n        return (\\n            <>\\n                <h1>Posts</h1>\\n                {this.props.posts.map(({ document: { data }, slug }) => (\\n                    <Link href={{ pathname: '/post', query: { id: slug } }} key={slug}>\\n                        <h2>{data.title}</h2>\\n                    </Link>\\n                ))}\\n            </>\\n        )\\n    }\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getInitialProps\"), \" function gets posts from posts folder and returns them in a usable format. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"We are going to use your filename as our post's slug or id\")), mdx(\"h3\", null, \"3. Create post page at pages/post.js\"), mdx(\"p\", null, \"Get document name from querystring, require it and parse it.\"), mdx(\"h4\", null, \"Install React Markdown\"), mdx(\"p\", null, \"To render Markdown we are going to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/rexxars/react-markdown\"\n  }), \"react-markdown\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"npm i -S react-markdown\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"import React from 'react'\\nimport matter from 'gray-matter';\\nimport ReactMarkdown from 'react-markdown';\\n\\nexport default class extends React.Component {\\n    static async getInitialProps({ query }) {\\n        const post = await import(`../posts/${query.id}.md`);\\n        const document = matter(post.default);\\n\\n        return {\\n            ...document\\n        };\\n    }\\n\\n    render() {\\n        return (\\n            <>\\n                <h1>{this.props.data.title}</h1>\\n                <i>{`Written by ${this.props.data.writtenBy} | ${this.props.data.date}`}</i>\\n                <ReactMarkdown source={this.props.content} />\\n            </>\\n        )\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Next.js is a great  React  framework. It's easy to use and lightweight. I use it on my personal  website  (toukopeltomaa.com) . In this postâ€¦","timeToRead":1,"banner":null}},"pageContext":{"slug":"/next-js-markdown-blog","formatString":"DD.MM.YYYY"}}}